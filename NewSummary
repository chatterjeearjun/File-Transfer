Letters - Rgx.ACE.Letters
External - RGX.IIB.Environments
External - Rgx.ACE.UMRules - Auth Inquiry

ClinicalAuthorization - Humana.Clinical.CgX20.Svc - Auth Submission with Clinical Authorization void and Rebuild
ClinicalAuthorization - Rgx.ACE.UMRules - Auth Validation CDR
ClinicalAuthorization - RGX.AUthQNRWrapperService

public LogHelper(IConfiguration configuration, IDbExtensionsWrapper dbExtensionsWrapper)
{
    var _configuration = configuration;
    var connectionString = _configuration["ConnectionStrings:CgxLoggingConnectionString"];

    if (string.IsNullOrEmpty(connectionString))
    {
        throw new ArgumentException($"Connection string 'CgxLoggingConnectionString' is missing or null.");
    }

    this.dbContainer = new DbContainer(connectionString);
    this.DbExtensionsWrapper = dbExtensionsWrapper;
}

public LogHelperTest()
{
    this.mockLogger = new Mock<ILogHelper>();
    this.mockDbContainer = new Mock<IDbContainer>();
    this._mockConfiguration = new Mock<IConfiguration>();
    this._mockDbExtensionsWrapper = GetMockDbExtensionsWrapper();

    // Setup mock configuration to return a valid connection string
    _mockConfiguration
        .Setup(config => config["ConnectionStrings:CgxLoggingConnectionString"])
        .Returns("MockDatabaseConnectionString");

    logHelper = new LogHelper(_mockConfiguration.Object, _mockDbExtensionsWrapper.Object);
}
