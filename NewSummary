Subject: SIT Regression Scope Finalization for FLD on 01/08/2025

Hi Team,

I’m scheduling this meeting to review and finalize the SIT regression scope for the FLD scheduled on 01/08/2025. During the call tomorrow, we will cover the following flows/functionalities. Please feel free to share this invite with additional relevant team members to ensure their alignment for the FLD.

Additionally, you’re welcome to add or update the scope items as needed. We may not have all the updated details about the impacted areas for the release, so please feel free to enhance the descriptions or suggest changes where necessary.

Scope of Discussion:

Letters:

Rgx.ACE.Letters
External:

RGX.IIB.Environments
Rgx.ACE.UMRules - Auth Inquiry
Clinical Authorization:

Humana.Clinical.CgX20.Svc - Auth Submission with Clinical Authorization void and Rebuild
Rgx.ACE.UMRules - Auth Validation CDR
RGX.AuthQNRWrapperService
Regression Start Date in QA2 Environment: 12/27 - 12/30

Looking forward to your inputs and participation.

Best regards,

Letters - Rgx.ACE.Letters
External - RGX.IIB.Environments
External - Rgx.ACE.UMRules - Auth Inquiry

ClinicalAuthorization - Humana.Clinical.CgX20.Svc - Auth Submission with Clinical Authorization void and Rebuild
ClinicalAuthorization - Rgx.ACE.UMRules - Auth Validation CDR
ClinicalAuthorization - RGX.AUthQNRWrapperService

public LogHelper(IConfiguration configuration, IDbExtensionsWrapper dbExtensionsWrapper)
{
    var _configuration = configuration;
    var connectionString = _configuration["ConnectionStrings:CgxLoggingConnectionString"];

    if (string.IsNullOrEmpty(connectionString))
    {
        throw new ArgumentException($"Connection string 'CgxLoggingConnectionString' is missing or null.");
    }

    this.dbContainer = new DbContainer(connectionString);
    this.DbExtensionsWrapper = dbExtensionsWrapper;
}

public LogHelperTest()
{
    this.mockLogger = new Mock<ILogHelper>();
    this.mockDbContainer = new Mock<IDbContainer>();
    this._mockConfiguration = new Mock<IConfiguration>();
    this._mockDbExtensionsWrapper = GetMockDbExtensionsWrapper();

    // Setup mock configuration to return a valid connection string
    _mockConfiguration
        .Setup(config => config["ConnectionStrings:CgxLoggingConnectionString"])
        .Returns("MockDatabaseConnectionString");

    logHelper = new LogHelper(_mockConfiguration.Object, _mockDbExtensionsWrapper.Object);
}
